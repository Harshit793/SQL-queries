https://leetcode.com/problems/movie-rating/?envType=study-plan-v2&envId=top-sql-50
Movie Rating
-- CTE for Top User
WITH TopUser AS (
    SELECT 
      Top 1  ur.name AS results
    FROM MovieRating Mr
    INNER JOIN Users ur
        ON Mr.user_id = ur.user_id
    GROUP BY ur.name
    ORDER BY COUNT(*) DESC, ur.name ASC
),
-- CTE for Top Movie in February 2020
TopMovie AS (
    SELECT 
      Top 1   Mv.title AS results
    FROM MovieRating Mr
    INNER JOIN Movies Mv
        ON Mr.movie_id = Mv.movie_id
    WHERE  YEAR(Mr.created_at) = 2020
      AND MONTH(Mr.created_at) = 2
    GROUP BY Mv.title
    ORDER BY Round((Sum(Mr.rating)*1.0/Count(*)),2) DESC, Mv.title ASC
)
-- Combine results


SELECT results FROM TopUser
UNION ALL
SELECT results FROM TopMovie

https://leetcode.com/problems/exchange-seats/description/?envType=study-plan-v2&envId=top-sql-50
Exchange Seats

WITH cte AS (
    SELECT 
        id,
        student,
        ROW_NUMBER() OVER (ORDER BY id) AS rn
    FROM Seat
)
SELECT 
    CASE 
        WHEN rn % 2 = 1 AND rn + 1 <= (SELECT COUNT(*) FROM Seat) THEN rn + 1
        WHEN rn % 2 = 0 THEN rn - 1
        ELSE rn
    END AS id,
    student
FROM cte
ORDER BY id;

https://leetcode.com/problems/restaurant-growth/solutions/6201063/simple-solution-using-cte-queries/?envType=study-plan-v2&envId=top-sql-50
Restaurant Growth
with cte as(
    select visited_on,
    sum(amount) as amount,
    avg(amount) as average_Amount
    from Customer
    group by visited_on
), cte1 as (
    select visited_on,
    SUM(amount) OVER (ORDER BY visited_on ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) 
    AS amount,
    AVG(amount) OVER (ORDER BY visited_on ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) 
    AS average_amount,
    row_number() over(order by visited_on) as num
    from cte
)

SELECT
    visited_on,
    ROUND(amount, 2) AS amount,
    ROUND(average_amount, 2) AS average_amount
FROM cte1
WHERE num > 6

https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/submissions/1492692476/?envType=study-plan-v2&envId=top-sql-50
Who has the highest friends
WITH CTE AS
(
SELECT requester_id as id,Count(accepter_id) as num
FROM RequestAccepted
GROUP BY requester_id

UNION ALL

SELECT accepter_id as id,count(requester_id) as num
FROM RequestAccepted
GROUP BY accepter_id

)

SELECT Top 1 id,Sum(num) num
FROM CTE
group by id
ORDER BY num desc
